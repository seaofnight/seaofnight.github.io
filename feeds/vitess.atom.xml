<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>yjkim blog - vitess</title><link href="https://seaofnight.github.io/" rel="alternate"></link><link href="https://seaofnight.github.io/feeds/vitess.atom.xml" rel="self"></link><id>https://seaofnight.github.io/</id><updated>2019-11-09T21:20:00+09:00</updated><entry><title>install-vitess-on-kubernetes</title><link href="https://seaofnight.github.io/install-vitess-on-kubernetes.html" rel="alternate"></link><published>2019-11-09T21:20:00+09:00</published><updated>2019-11-09T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-11-09:/install-vitess-on-kubernetes.html</id><summary type="html">&lt;p&gt;vitess,mysql, database&lt;/p&gt;</summary><content type="html">&lt;h1&gt;vitess 소개&lt;/h1&gt;
&lt;p&gt;오늘 포스팅 할 내용은 사내에서 사용하지 않기로 한 Vitess 라는 솔루션에 대한 기록 및 조사한 내용을 공유하는 자리를 가지도록 하곘다. &lt;/p&gt;
&lt;p&gt;비교제품군이 있으며 비교제품중에 선택이 되었으므로 사용 안할것 같은 내용은 기록을 하여 남기도록 하겠다. &lt;/p&gt;
&lt;p&gt;Vitess 는 Youtube 에 mysql 을 ScaleOut 하기 위하여 개발이 되었으며 
제품 소개 자료에서도 Scaleout에 대한 기능에 대하여 강점을 많이 설명을 하는 제품이다. &lt;/p&gt;
&lt;p&gt;&lt;img alt="vitess archeture" src="https://vitess.io/docs/overview/img/VitessOverview.png"&gt;&lt;/p&gt;
&lt;p&gt;하지만 Mysql 은 아래쪽에 있을뿐 다른 무언가가 많이 붙어 있는것을 볼수 있다. &lt;/p&gt;
&lt;p&gt;붙어 있는 컴포넌트에 대한 대략적인 설명을 하고 가겠다. &lt;/p&gt;
&lt;h3&gt;Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vTgate &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vitess 의 외부에서 접속 할 수 있는 접점이라고 보면 된다. 
Vtgate 는 Topology 를 통하여 Sharding Key 정보를 확인 한후에 해당하는 Vtablet에 있는 데이터를 가져오도록 되어있다. 
Kubernetes 의 외부에 노출은 Service 로 될것이고 
일반 Baremetal 에 도커나 쌩으로 설치 되었을 시에는 당연이 Port 가 열려있을것이다. 
Get Start Locally 나 Start with Kubenetes 를 보아도 패키징이 아주 잘되있으며 
예제로 삼기에도 충분할정도로 자세하고 내공이 보여지도록 구성이 되어있다 &lt;/p&gt;
&lt;p&gt;역시 갓갓 구글 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topology &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topology 는 어떤 것으로 구성할지 선택할 수 있는 옵션들이 있다. 
일반적으로 예제에서는 ETCD를 이용하여 작성되어있는데 Zookeeper, Consel 등으로 구성할 수 있으며 vTablet 에서 저장하는 Sharding Key 가 어떻게 되느냐 클러스터의 형상이 어떻게 되느냐 등등에 대한 Metadata 가 저장이 되고 관리 되는곳이다. 
설치시에는 Global 로 1개, Cell 별로 Replica 개수를 지정하여 설치 할 수 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vTablet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vTablet 는 Mysql 을 Proxy Server 역활을 해주는 프로세스이며 
1개의 Mysql Server 당 1개의 vTable 가 붙어서 해당 저장소를 관리 해준다. 
vTablet 는 Kubernetes 로 설치 될경우에는 
vtablet, mysql, ganeral-log, error-log,slow-log등 로그 컨테이너와 함께 생성이 되며 
만약 Monitoring 솔루션인 PMM 과 같이 배포하였을 경우에는 PMM 도 vTable 포드에 포함되어 배포가 된다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vtctl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vtctl 은 topology 를 통하여 Cli 로 vschema, sharding, 혹은 ddl 등을 날릴수 있는 
cli client tool 이다 
설치는 vitess 를 build 하면 vtctlclient 가 빌드가 되며 빌드 된 bin 을 사용하여 topology 를 지정한다거나. vtctld kubernetes service 를 지정하여 명령을 날릴수 있다. &lt;/p&gt;
&lt;p&gt;vitess 의 vtctl 은 vtgate 로 명령을 날릴수 있고 vTablet 로도 직접 command 를 날려서 제어할 수 있다. 요청하는 방식은 cli 의 sub command 를 help 하여서 확인 하여야 된다. &lt;/p&gt;
&lt;p&gt;vtctl 은 위에 아키텍쳐 그림에서 보듯이 Dashboard 도 제공을 해 주고 있다. 
Material 기반의 UI 이며 조금은 개선이 되었으나 아직은 가식성이 좀 떨어지는 면이 있다. &lt;/p&gt;
&lt;h1&gt;install&lt;/h1&gt;
&lt;h3&gt;install 절차&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;사전 조건 &lt;/li&gt;
&lt;li&gt;kubernetes 설치가 되어있어야 된다. 1.15 이상 &lt;/li&gt;
&lt;li&gt;helm chart 를 이용하여 배포 할 예정이다. &lt;/li&gt;
&lt;li&gt;helm chart 는 1.16 버전에 맞추어서 old api remove 가 되어서 deploy, daemon api 를 맞게 정정 해주어야 된다. &lt;/li&gt;
&lt;li&gt;설치 절차 &lt;/li&gt;
&lt;li&gt;topology 인 etcd 설치 &lt;/li&gt;
&lt;li&gt;storage class 생성 &lt;/li&gt;
&lt;li&gt;vitess depoly 의 절차로 설치가 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;install script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create kubernetes namespaces &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl create ns vitess 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;install etcd operator &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# project 를 clone 해온다. &lt;/span&gt;
$ git clone https://github.com/coreos/etcd-operator.git

&lt;span class="c1"&gt;# rbac 를 생성해준다. &lt;/span&gt;
$ ./etcd-operator/example/rbac/create_role.sh --namespace&lt;span class="o"&gt;=&lt;/span&gt;vitess   

&lt;span class="c1"&gt;# etcd operater 을 생성 해준다. &lt;/span&gt;
$ kubectl create -f etcd-operator/example/deployment.yaml

&lt;span class="c1"&gt;# 생성 확인 &lt;/span&gt;
$ kubectl get crd &lt;span class="p"&gt;|&lt;/span&gt; grep etcdcl 
NAME                                    KIND
etcdclusters.etcd.database.coreos.com   CustomResourceDefinition.v1beta1.apiextensions.k8s.io

&lt;span class="c1"&gt;# etcd operater helm chart 로 생성 &lt;/span&gt;
helm install stable/etcd-operator --name etcd --namespace vitess  &lt;span class="se"&gt;\&lt;/span&gt;
  --set customResources.createEtcdClusterCRD&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --set deployments.backupOperator&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --set deployments.restoreOperator&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --set etcdCluster.size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;create storage class &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;vitess1
&lt;span class="nv"&gt;POOL_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;-pool 
&lt;span class="nv"&gt;SC_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;-sc
cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF | kubectl create -f - &lt;/span&gt;
&lt;span class="s"&gt;apiVersion: ceph.rook.io/v1&lt;/span&gt;
&lt;span class="s"&gt;kind: CephBlockPool&lt;/span&gt;
&lt;span class="s"&gt;metadata:&lt;/span&gt;
&lt;span class="s"&gt;  name: $POOL_NAME&lt;/span&gt;
&lt;span class="s"&gt;  namespace: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;spec:&lt;/span&gt;
&lt;span class="s"&gt;  failureDomain: host&lt;/span&gt;
&lt;span class="s"&gt;  replicated:&lt;/span&gt;
&lt;span class="s"&gt;    size: 1&lt;/span&gt;
&lt;span class="s"&gt;---&lt;/span&gt;
&lt;span class="s"&gt;apiVersion: storage.k8s.io/v1&lt;/span&gt;
&lt;span class="s"&gt;kind: StorageClass&lt;/span&gt;
&lt;span class="s"&gt;metadata:&lt;/span&gt;
&lt;span class="s"&gt;   name: $SC_NAME&lt;/span&gt;
&lt;span class="s"&gt;provisioner: rook-ceph.rbd.csi.ceph.com&lt;/span&gt;
&lt;span class="s"&gt;parameters:&lt;/span&gt;
&lt;span class="s"&gt;    clusterID: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;    pool: $POOL_NAME&lt;/span&gt;
&lt;span class="s"&gt;    imageFormat: &amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    imageFeatures: layering&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/provisioner-secret-name: rook-ceph-csi&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/node-stage-secret-name: rook-ceph-csi&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/fstype: ext4&lt;/span&gt;
&lt;span class="s"&gt;reclaimPolicy: Delete&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;install vitess cluster &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/vitessio/vitess.git

$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/vitess/example/helm

&lt;span class="c1"&gt;# 예제에서 생성하는 초기 vitess cluster 을 생성해준다. &lt;/span&gt;
$ helm install --name vitess --namespace vitess ../../helm/vitess  &lt;span class="se"&gt;\&lt;/span&gt;
  -f 101_initial_cluster.yaml --debug
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;vitess client&lt;/h1&gt;
&lt;p&gt;vitess 는 3가지의 Client 옵션을 가지고 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vtctlclient &lt;/li&gt;
&lt;li&gt;mysql client &lt;/li&gt;
&lt;li&gt;grpc &lt;/li&gt;
&lt;li&gt;vtctl gui &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위에 있는 옵션중에 mysql client 가 적용이 되면 그 외의 나머지 명령도 거의 mysql client 를 지원하는 것들이라서 왠만큼 사용하는데에는 문제가 없을듯 하다. &lt;/p&gt;
&lt;p&gt;vtctlclient, vtctl gui 등은 vschema, vindex, vseq 등등을 정의 설정하는데 사용을 할 수 있다. 
나머지 vtworker 등은 기록하지 않도록 하겠다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vtctlclinet example &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl get svc vtctld -o json &lt;span class="p"&gt;|&lt;/span&gt; jq -r &lt;span class="s2"&gt;&amp;quot;.spec.clusterIP&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl get svc vtctld -o json &lt;span class="p"&gt;|&lt;/span&gt; jq -r &lt;span class="s2"&gt;&amp;quot;.spec.ports[1].port&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetCellInfoNames   
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetCellInfo zone1

vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; ListAllTablets
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; ListTablets zone1-0794219800
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetTablet zone1-0794219800
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetKeyspaces  
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetKeyspace commerce
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetVSchema t
&lt;/pre&gt;&lt;/div&gt;</content><category term="vitess"></category><category term="mysql"></category><category term="database"></category></entry></feed>