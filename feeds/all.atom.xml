<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>yjkim blog</title><link href="https://seaofnight.github.io/" rel="alternate"></link><link href="https://seaofnight.github.io/feeds/all.atom.xml" rel="self"></link><id>https://seaofnight.github.io/</id><updated>2019-11-09T21:20:00+09:00</updated><entry><title>install-vitess-on-kubernetes</title><link href="https://seaofnight.github.io/install-vitess-on-kubernetes.html" rel="alternate"></link><published>2019-11-09T21:20:00+09:00</published><updated>2019-11-09T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-11-09:/install-vitess-on-kubernetes.html</id><summary type="html">&lt;p&gt;vitess,mysql, database&lt;/p&gt;</summary><content type="html">&lt;h1&gt;vitess 소개&lt;/h1&gt;
&lt;p&gt;오늘 포스팅 할 내용은 사내에서 사용하지 않기로 한 Vitess 라는 솔루션에 대한 기록 및 조사한 내용을 공유하는 자리를 가지도록 하곘다. &lt;/p&gt;
&lt;p&gt;비교제품군이 있으며 비교제품중에 선택이 되었으므로 사용 안할것 같은 내용은 기록을 하여 남기도록 하겠다. &lt;/p&gt;
&lt;p&gt;Vitess 는 Youtube 에 mysql 을 ScaleOut 하기 위하여 개발이 되었으며 
제품 소개 자료에서도 Scaleout에 대한 기능에 대하여 강점을 많이 설명을 하는 제품이다. &lt;/p&gt;
&lt;p&gt;&lt;img alt="vitess archeture" src="https://vitess.io/docs/overview/img/VitessOverview.png"&gt;&lt;/p&gt;
&lt;p&gt;하지만 Mysql 은 아래쪽에 있을뿐 다른 무언가가 많이 붙어 있는것을 볼수 있다. &lt;/p&gt;
&lt;p&gt;붙어 있는 컴포넌트에 대한 대략적인 설명을 하고 가겠다. &lt;/p&gt;
&lt;h3&gt;Component&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;vTgate &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vitess 의 외부에서 접속 할 수 있는 접점이라고 보면 된다. 
Vtgate 는 Topology 를 통하여 Sharding Key 정보를 확인 한후에 해당하는 Vtablet에 있는 데이터를 가져오도록 되어있다. 
Kubernetes 의 외부에 노출은 Service 로 될것이고 
일반 Baremetal 에 도커나 쌩으로 설치 되었을 시에는 당연이 Port 가 열려있을것이다. 
Get Start Locally 나 Start with Kubenetes 를 보아도 패키징이 아주 잘되있으며 
예제로 삼기에도 충분할정도로 자세하고 내공이 보여지도록 구성이 되어있다 &lt;/p&gt;
&lt;p&gt;역시 갓갓 구글 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topology &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topology 는 어떤 것으로 구성할지 선택할 수 있는 옵션들이 있다. 
일반적으로 예제에서는 ETCD를 이용하여 작성되어있는데 Zookeeper, Consel 등으로 구성할 수 있으며 vTablet 에서 저장하는 Sharding Key 가 어떻게 되느냐 클러스터의 형상이 어떻게 되느냐 등등에 대한 Metadata 가 저장이 되고 관리 되는곳이다. 
설치시에는 Global 로 1개, Cell 별로 Replica 개수를 지정하여 설치 할 수 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vTablet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vTablet 는 Mysql 을 Proxy Server 역활을 해주는 프로세스이며 
1개의 Mysql Server 당 1개의 vTable 가 붙어서 해당 저장소를 관리 해준다. 
vTablet 는 Kubernetes 로 설치 될경우에는 
vtablet, mysql, ganeral-log, error-log,slow-log등 로그 컨테이너와 함께 생성이 되며 
만약 Monitoring 솔루션인 PMM 과 같이 배포하였을 경우에는 PMM 도 vTable 포드에 포함되어 배포가 된다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vtctl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vtctl 은 topology 를 통하여 Cli 로 vschema, sharding, 혹은 ddl 등을 날릴수 있는 
cli client tool 이다 
설치는 vitess 를 build 하면 vtctlclient 가 빌드가 되며 빌드 된 bin 을 사용하여 topology 를 지정한다거나. vtctld kubernetes service 를 지정하여 명령을 날릴수 있다. &lt;/p&gt;
&lt;p&gt;vitess 의 vtctl 은 vtgate 로 명령을 날릴수 있고 vTablet 로도 직접 command 를 날려서 제어할 수 있다. 요청하는 방식은 cli 의 sub command 를 help 하여서 확인 하여야 된다. &lt;/p&gt;
&lt;p&gt;vtctl 은 위에 아키텍쳐 그림에서 보듯이 Dashboard 도 제공을 해 주고 있다. 
Material 기반의 UI 이며 조금은 개선이 되었으나 아직은 가식성이 좀 떨어지는 면이 있다. &lt;/p&gt;
&lt;h1&gt;install&lt;/h1&gt;
&lt;h3&gt;install 절차&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;사전 조건 &lt;/li&gt;
&lt;li&gt;kubernetes 설치가 되어있어야 된다. 1.15 이상 &lt;/li&gt;
&lt;li&gt;helm chart 를 이용하여 배포 할 예정이다. &lt;/li&gt;
&lt;li&gt;helm chart 는 1.16 버전에 맞추어서 old api remove 가 되어서 deploy, daemon api 를 맞게 정정 해주어야 된다. &lt;/li&gt;
&lt;li&gt;설치 절차 &lt;/li&gt;
&lt;li&gt;topology 인 etcd 설치 &lt;/li&gt;
&lt;li&gt;storage class 생성 &lt;/li&gt;
&lt;li&gt;vitess depoly 의 절차로 설치가 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;install script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create kubernetes namespaces &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl create ns vitess 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;install etcd operator &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# project 를 clone 해온다. &lt;/span&gt;
$ git clone https://github.com/coreos/etcd-operator.git

&lt;span class="c1"&gt;# rbac 를 생성해준다. &lt;/span&gt;
$ ./etcd-operator/example/rbac/create_role.sh --namespace&lt;span class="o"&gt;=&lt;/span&gt;vitess   

&lt;span class="c1"&gt;# etcd operater 을 생성 해준다. &lt;/span&gt;
$ kubectl create -f etcd-operator/example/deployment.yaml

&lt;span class="c1"&gt;# 생성 확인 &lt;/span&gt;
$ kubectl get crd &lt;span class="p"&gt;|&lt;/span&gt; grep etcdcl 
NAME                                    KIND
etcdclusters.etcd.database.coreos.com   CustomResourceDefinition.v1beta1.apiextensions.k8s.io

&lt;span class="c1"&gt;# etcd operater helm chart 로 생성 &lt;/span&gt;
helm install stable/etcd-operator --name etcd --namespace vitess  &lt;span class="se"&gt;\&lt;/span&gt;
  --set customResources.createEtcdClusterCRD&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --set deployments.backupOperator&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --set deployments.restoreOperator&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --set etcdCluster.size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;create storage class &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;vitess1
&lt;span class="nv"&gt;POOL_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;-pool 
&lt;span class="nv"&gt;SC_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$NAME&lt;/span&gt;-sc
cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF | kubectl create -f - &lt;/span&gt;
&lt;span class="s"&gt;apiVersion: ceph.rook.io/v1&lt;/span&gt;
&lt;span class="s"&gt;kind: CephBlockPool&lt;/span&gt;
&lt;span class="s"&gt;metadata:&lt;/span&gt;
&lt;span class="s"&gt;  name: $POOL_NAME&lt;/span&gt;
&lt;span class="s"&gt;  namespace: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;spec:&lt;/span&gt;
&lt;span class="s"&gt;  failureDomain: host&lt;/span&gt;
&lt;span class="s"&gt;  replicated:&lt;/span&gt;
&lt;span class="s"&gt;    size: 1&lt;/span&gt;
&lt;span class="s"&gt;---&lt;/span&gt;
&lt;span class="s"&gt;apiVersion: storage.k8s.io/v1&lt;/span&gt;
&lt;span class="s"&gt;kind: StorageClass&lt;/span&gt;
&lt;span class="s"&gt;metadata:&lt;/span&gt;
&lt;span class="s"&gt;   name: $SC_NAME&lt;/span&gt;
&lt;span class="s"&gt;provisioner: rook-ceph.rbd.csi.ceph.com&lt;/span&gt;
&lt;span class="s"&gt;parameters:&lt;/span&gt;
&lt;span class="s"&gt;    clusterID: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;    pool: $POOL_NAME&lt;/span&gt;
&lt;span class="s"&gt;    imageFormat: &amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    imageFeatures: layering&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/provisioner-secret-name: rook-ceph-csi&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/node-stage-secret-name: rook-ceph-csi&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph&lt;/span&gt;
&lt;span class="s"&gt;    csi.storage.k8s.io/fstype: ext4&lt;/span&gt;
&lt;span class="s"&gt;reclaimPolicy: Delete&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;install vitess cluster &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/vitessio/vitess.git

$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/vitess/example/helm

&lt;span class="c1"&gt;# 예제에서 생성하는 초기 vitess cluster 을 생성해준다. &lt;/span&gt;
$ helm install --name vitess --namespace vitess ../../helm/vitess  &lt;span class="se"&gt;\&lt;/span&gt;
  -f 101_initial_cluster.yaml --debug
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;vitess client&lt;/h1&gt;
&lt;p&gt;vitess 는 3가지의 Client 옵션을 가지고 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vtctlclient &lt;/li&gt;
&lt;li&gt;mysql client &lt;/li&gt;
&lt;li&gt;grpc &lt;/li&gt;
&lt;li&gt;vtctl gui &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위에 있는 옵션중에 mysql client 가 적용이 되면 그 외의 나머지 명령도 거의 mysql client 를 지원하는 것들이라서 왠만큼 사용하는데에는 문제가 없을듯 하다. &lt;/p&gt;
&lt;p&gt;vtctlclient, vtctl gui 등은 vschema, vindex, vseq 등등을 정의 설정하는데 사용을 할 수 있다. 
나머지 vtworker 등은 기록하지 않도록 하겠다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vtctlclinet example &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl get svc vtctld -o json &lt;span class="p"&gt;|&lt;/span&gt; jq -r &lt;span class="s2"&gt;&amp;quot;.spec.clusterIP&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl get svc vtctld -o json &lt;span class="p"&gt;|&lt;/span&gt; jq -r &lt;span class="s2"&gt;&amp;quot;.spec.ports[1].port&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetCellInfoNames   
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetCellInfo zone1

vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; ListAllTablets
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; ListTablets zone1-0794219800
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetTablet zone1-0794219800
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetKeyspaces  
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetKeyspace commerce
vtctlclient -server &lt;span class="nv"&gt;$HOST&lt;/span&gt;:&lt;span class="nv"&gt;$PORT&lt;/span&gt; GetVSchema t
&lt;/pre&gt;&lt;/div&gt;</content><category term="vitess"></category><category term="mysql"></category><category term="database"></category></entry><entry><title>wine-in-docker-with-kakaotalk</title><link href="https://seaofnight.github.io/wine-in-docker-with-kakaotalk.html" rel="alternate"></link><published>2019-09-27T21:20:00+09:00</published><updated>2019-09-27T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-27:/wine-in-docker-with-kakaotalk.html</id><summary type="html">&lt;p&gt;kakaotalk,docker,local&lt;/p&gt;</summary><content type="html">&lt;h1&gt;overview&lt;/h1&gt;
&lt;p&gt;kakaotalk 리눅스 버전이 지원이 안되는데 이어형님이 인터넷에 친절하게 카카오톡을 도커로 실행 시켜주는 방법을 포스팅해주셨다. 
와인을 도커에서 실행하고 카카오톡에 필요한 의존성 라이브러리들을 설치한후에 
그 도커 이미지를 한개의 바이너리 파일로 만드는 부분을 포스팅 하였는데...&lt;/p&gt;
&lt;p&gt;우선 도커위에 와인을 실행하는 부분 까지만 설정이 되었으며 스테틱 컨테이너는 시간을 좀 두어야겠다. &lt;/p&gt;
&lt;h3&gt;도커 실행 부분&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Dockerfile 파일을 참고해보면 와인트릭, 나눔폰트 등을 받고 endpoint.sh 를 실행 &lt;/li&gt;
&lt;li&gt;endpoint.sh 에서 kakaotalk 을 받아서 실행해준다. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;실행시 문제 나오는 부분&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;한글 변환 문제 &lt;ul&gt;
&lt;li&gt;아래 환경변수로 들어가는 부분을 리눅스에 어떤 한글 변환기를 사용했느냐에 맞추어서 설정을 해준다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;display 출력문제 &lt;ul&gt;
&lt;li&gt;linux 의 docker에서 윈도우 프로그램을 돌리는데에는 이해가 조금 필요하다. &lt;/li&gt;
&lt;li&gt;간단하게 모두 오픈하도록 설정한다. &lt;ul&gt;
&lt;li&gt;이부분 -&amp;gt;&amp;gt; xhost +local:root&lt;/li&gt;
&lt;li&gt;재부팅하면 사라진다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sound 관련되어서 pulseaudio 이미지를 사용하여 올리게 되었는데 없는것이랑 있는것이랑 차이가?&lt;ul&gt;
&lt;li&gt;간혈적으로 죽는 현상이 자주 발생되어서 조금 더 디버깅을 해봐야겠다. &lt;/li&gt;
&lt;li&gt;pulseaudio 사용 안하고 kakaotalk 에서 알람을 끄면 죽진 않음 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;docker&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/run/me/y/1/06/k/dockerfiles/kakaotalk-wine  master !1 ?1  cat Dockerfile                          ✔  11:47:59
# Run Kakaotalk using wine
#
#       if [[ ! -d &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.wine&amp;quot; ]]; then
#               mkdir -p &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/.wine&amp;quot;
#       fi
#
#       docker run -d \
#               -e &amp;quot;GTK_IM_MODULE=uim&amp;quot; \
#               -e &amp;quot;XMODIFIERS=@im=uim&amp;quot; \
#               -e &amp;quot;QT_IM_MODULE=uim&amp;quot; \
#               -e &amp;quot;DISPLAY=unix&lt;span class="nv"&gt;$DISPLAY&lt;/span&gt;&amp;quot; \
#               -v /etc/localtime:/etc/localtime:ro \
#               -v /tmp/.X11-unix:/tmp/.X11-unix \
#               -v &amp;quot;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.wine:/home/wine/.wine&amp;quot; \
#               --link pulseaudio:pulseaudio \
#               -e PULSE_SERVER=pulseaudio \
#               --hostname kakao \
#               --name kakao \
#               leoh0/kakao
FROM alpine:3.9
RUN echo &amp;#39;x86&amp;#39; &amp;gt; /etc/apk/arch &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
apk --no-cache add \
ca-certificates \
wget \
wine \
zenity
RUN wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
chmod +x ./winetricks &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
mv ./winetricks /usr/local/bin/
RUN mkdir -p /usr/share/fonts/NanumFont &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
cd /usr/share/fonts/ &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
wget http://cdn.naver.com/naver/NanumFont/fontfiles/NanumFont_TTF_ALL.zip &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
unzip NanumFont_TTF_ALL.zip -d NanumFont &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
rm -f NanumFont_TTF_ALL.zip
ENV LANG=ko_KR.UTF-8 \
LANGUAGE=ko_KR.UTF-8 \
HOME=/home/wine
RUN adduser -u 1000 -D wine &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
mkdir -p &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.wine &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
chown -R wine.wine &lt;span class="nv"&gt;$HOME&lt;/span&gt;
WORKDIR /home/wine
USER wine
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
ENTRYPOINT [ &amp;quot;/usr/local/bin/entrypoint.sh&amp;quot; ]


/run/me/y/1/06/k/dockerfiles/kakaotalk-wine  master !1 ?1  cat entrypoint.sh                       ✔  11:48:01
#!/bin/sh
set -e
(
if [ ! -e &amp;quot;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.wine/drive_c/Program Files/Kakao/KakaoTalk/KakaoTalk.exe&amp;quot; ]; then
echo &amp;quot;Install wineboot&amp;quot;
WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot
winetricks -q d3dx11_43 gdiplus richtx32 msxml6 \
&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; winetricks win7
wget http://app.pc.kakao.com/talk/win32/KakaoTalk_Setup.exe \
&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; wine KakaoTalk_Setup.exe
fi
)
exec wine &amp;quot;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.wine/drive_c/Program Files/Kakao/KakaoTalk/KakaoTalk.exe&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker pulseaudio&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/jessfraz/dockerfiles&lt;/li&gt;
&lt;li&gt;https://github.com/leoh0/dockerfiles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docker run &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xhost +local:root

docker run -d  &lt;span class="se"&gt;\&lt;/span&gt;
-v /etc/localtime:/etc/localtime:ro &lt;span class="se"&gt;\&lt;/span&gt;
--device /dev/snd &lt;span class="se"&gt;\&lt;/span&gt;
-p &lt;span class="m"&gt;4713&lt;/span&gt;:4713 &lt;span class="se"&gt;\&lt;/span&gt;
--restart always &lt;span class="se"&gt;\&lt;/span&gt;
--group-add audio &lt;span class="se"&gt;\&lt;/span&gt;
--name pulseaudio &lt;span class="se"&gt;\&lt;/span&gt;
jess/pulseaudio

docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s2"&gt;&amp;quot;GTK_IM_MODULE=uim&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s2"&gt;&amp;quot;XMODIFIERS=@im=uim&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s2"&gt;&amp;quot;QT_IM_MODULE=uim&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="s2"&gt;&amp;quot;DISPLAY=unix&lt;/span&gt;&lt;span class="nv"&gt;$DISPLAY&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-v /etc/localtime:/etc/localtime:ro &lt;span class="se"&gt;\&lt;/span&gt;
-v /tmp/.X11-unix:/tmp/.X11-unix &lt;span class="se"&gt;\&lt;/span&gt;
-v &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.wine:/home/wine/.wine&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--link pulseaudio:pulseaudio &lt;span class="se"&gt;\&lt;/span&gt;
-e &lt;span class="nv"&gt;PULSE_SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pulseaudio &lt;span class="se"&gt;\&lt;/span&gt;
--hostname kakao &lt;span class="se"&gt;\&lt;/span&gt;
--name kakao &lt;span class="se"&gt;\&lt;/span&gt;
--restart always &lt;span class="se"&gt;\&lt;/span&gt;
kakaotalk:latest
&lt;/pre&gt;&lt;/div&gt;</content><category term="kakaotalk"></category><category term="docker"></category><category term="local"></category></entry><entry><title>Introduction-firewalld</title><link href="https://seaofnight.github.io/Introduction-firewalld.html" rel="alternate"></link><published>2019-09-26T21:20:00+09:00</published><updated>2019-09-26T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-26:/Introduction-firewalld.html</id><summary type="html">&lt;p&gt;firewalld,network,linux&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Firewalld&lt;/h1&gt;
&lt;h3&gt;Firewalld 의 개념&lt;/h3&gt;
&lt;h3&gt;Firewalld 의 기능&lt;/h3&gt;
&lt;h1&gt;Firewalld install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install -y firewalld 
$ sudo systemctl status firewalld 
$ sudo systemctl start firewalld 
$ sudo firewall-cmd --state
output : running 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Firewalld 사용방법&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Zone 조회 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Default 조회 &lt;/span&gt;
$ sudo firewall-cmd --get-default-zone

&lt;span class="c1"&gt;# Active Zone list 조회 &lt;/span&gt;
$ firewall-cmd --get-active-zones

&lt;span class="c1"&gt;# 특정 Zone 의 정보 조회 &lt;/span&gt;
$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;home --list-all
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Default Zone 변경 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo firewall-cmd --set-default-zone&lt;span class="o"&gt;=&lt;/span&gt;home
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Zone 에 Service 허용 &lt;ul&gt;
&lt;li&gt;영구와 비영구의 차이는 --reload 시에 비영구 옵션은 사라진다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Http 서비스 허용 &lt;/span&gt;
$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --add-service&lt;span class="o"&gt;=&lt;/span&gt;http
$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --list-services
output : dhcpv6-client http ssh

&lt;span class="c1"&gt;# Http 서비스 영구 허용 &lt;/span&gt;
$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --permanent --add-service&lt;span class="o"&gt;=&lt;/span&gt;http

&lt;span class="c1"&gt;# Port/protocol 로 허용 &lt;/span&gt;
$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5000&lt;/span&gt;/tcp
$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --list-ports
output : &lt;span class="m"&gt;5000&lt;/span&gt;/tcp

&lt;span class="c1"&gt;# Port/protocol 로 영구 허용 &lt;/span&gt;
$ sudo firewall-cmd --zone&lt;span class="o"&gt;=&lt;/span&gt;public --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5000&lt;/span&gt;/tcp
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Firewalld Service Reload &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo firewall-cmd --reload
&lt;/pre&gt;&lt;/div&gt;</content><category term="firewalld"></category><category term="network"></category><category term="linux"></category></entry><entry><title>ceph-install-with-ansible</title><link href="https://seaofnight.github.io/ceph-install-with-ansible.html" rel="alternate"></link><published>2019-09-26T21:20:00+09:00</published><updated>2019-09-26T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-26:/ceph-install-with-ansible.html</id><summary type="html">&lt;p&gt;ceph,storage&lt;/p&gt;</summary><content type="html">&lt;h1&gt;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;회사에서 Ceph 를 계속 스터디를 하고 있었으나. K8s Cluster 에 올려놓고 사용만 하고있었지 Baremetal 에 올려 사용하지는 않고있었다. &lt;/li&gt;
&lt;li&gt;자세하게 사용하기도 해야할 뿐더러 여러가지 옵션을 테스트 및 운용하기 위한 클러스터 구축을 정리하기 위하여 본 포스팅을 정리한다. &lt;/li&gt;
&lt;li&gt;Ceph 설치방법은 Ceph-ansible 이며  stable-3.2 버전을 이용하여 설치 하였다. &lt;/li&gt;
&lt;li&gt;설치 노드는 &lt;ul&gt;
&lt;li&gt;mon 1, osd 3, mgr 1 이며 mon1 과 mgr1, osd1 이 같은 호스트에 배포가 되었다. &lt;/li&gt;
&lt;li&gt;ceph0 10.0.3.2 8cpu 16gb ram, /dev/sdb 300gb&lt;/li&gt;
&lt;li&gt;ceph1 10.0.3.3 8cpu 16gb ram, /dev/sdb 300gb&lt;/li&gt;
&lt;li&gt;ceph2 10.0.3.4 8cpu 16gb ram, /dev/sdb 300gb &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ceph prerequirements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;3node 부팅 Vagrant 로 부팅하면서 /dev/sdb/ 를 생성하도록 하였으며 lvm, fs 생성은 하지 않았다.&lt;/li&gt;
&lt;li&gt;ssh fingerprint 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 이방법으로 패스워드 yes, 패스워드 일일이 쳤음 &lt;/span&gt;
ssh-keygen 
ssh-copy-id ceph0
ssh-copy-id ceph1
ssh-copy-id ceph2

&lt;span class="c1"&gt;# 핑거프린트 검증용 각 호스트 접속 조회 확인  &lt;/span&gt;
ssh root@ceph0 hostname
ssh root@ceph1 hostname
ssh root@ceph2 hostname


&lt;span class="c1"&gt;# 다른방법으로는 sshpass 가 있다고 한다. 아래와 같이 사용하면 된다. &lt;/span&gt;
yum install -y sshpass
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;passwd-content&amp;quot;&lt;/span&gt; ~/passwd
sshpass -f ~/passwd ssh-copy-id root@ceph0
ssh root@ceph0 hostname 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ceph 설치 전 사전 준비 &lt;ul&gt;
&lt;li&gt;Pip, git Clone, 의존성 파일을 받아준다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y git python-pip sshpass &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
git clone https://github.com/ceph/ceph-ansible.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ceph-ansible &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
git checkout  stable-3.2 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
pip install -r requirements.txt 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;/etc/hosts 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; /etc/hosts&lt;/span&gt;

&lt;span class="s"&gt;10.0.3.2 ceph0&lt;/span&gt;
&lt;span class="s"&gt;10.0.3.3 ceph1&lt;/span&gt;
&lt;span class="s"&gt;10.0.3.4 ceph2&lt;/span&gt;

&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="c1"&gt;# 검증하기위한 조회 &lt;/span&gt;
cat /etc/hosts

&lt;span class="c1"&gt;# ceph &lt;/span&gt;
firewall-cmd --permanent --new-service &lt;span class="m"&gt;3300&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  firewall-cmd --permanent --new-service &lt;span class="m"&gt;6789&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  firewall-cmd --reload
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;ceph ansible install&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;inventory 작성 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF | tee inventory.ini&lt;/span&gt;
&lt;span class="s"&gt;[mons]&lt;/span&gt;
&lt;span class="s"&gt;ceph0&lt;/span&gt;

&lt;span class="s"&gt;[mgrs]&lt;/span&gt;
&lt;span class="s"&gt;ceph0&lt;/span&gt;

&lt;span class="s"&gt;[osds]&lt;/span&gt;
&lt;span class="s"&gt;ceph0&lt;/span&gt;
&lt;span class="s"&gt;ceph1&lt;/span&gt;
&lt;span class="s"&gt;ceph2&lt;/span&gt;

&lt;span class="s"&gt;[grafana-server]&lt;/span&gt;
&lt;span class="s"&gt;ceph0&lt;/span&gt;

&lt;span class="s"&gt;[all:children]&lt;/span&gt;
&lt;span class="s"&gt;mons&lt;/span&gt;
&lt;span class="s"&gt;osds&lt;/span&gt;
&lt;span class="s"&gt;mgrs&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;extra-vars.yml 파일 작성 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF | tee extra.yaml&lt;/span&gt;
&lt;span class="s"&gt;# ceph&lt;/span&gt;
&lt;span class="s"&gt;monitor_interface: eth1&lt;/span&gt;
&lt;span class="s"&gt;monitor_address: 10.0.3.2&lt;/span&gt;
&lt;span class="s"&gt;public_network: 10.0.3.0/24&lt;/span&gt;
&lt;span class="s"&gt;cluster_network: 10.0.3.0/24&lt;/span&gt;

&lt;span class="s"&gt;ceph_origin: repository&lt;/span&gt;
&lt;span class="s"&gt;ceph_repository: community&lt;/span&gt;
&lt;span class="s"&gt;ceph_stable_release: luminous&lt;/span&gt;

&lt;span class="s"&gt;ceph_conf_overrides:&lt;/span&gt;
&lt;span class="s"&gt;  global:&lt;/span&gt;
&lt;span class="s"&gt;    mon_allow_pool_delete: true&lt;/span&gt;
&lt;span class="s"&gt;    osd_pool_default_size: 1&lt;/span&gt;
&lt;span class="s"&gt;    osd_pool_default_min_size: 1&lt;/span&gt;
&lt;span class="s"&gt;    osd_pg_stat_report_internal_max: 1&lt;/span&gt;
&lt;span class="s"&gt;  osd:&lt;/span&gt;
&lt;span class="s"&gt;    osd_min_pg_log_entries: 10&lt;/span&gt;
&lt;span class="s"&gt;    osd_max_pg_log_entries: 10&lt;/span&gt;
&lt;span class="s"&gt;    osd_pg_log_dups_tracked: 10&lt;/span&gt;
&lt;span class="s"&gt;    osd_pg_log_trim_min: 10&lt;/span&gt;

&lt;span class="s"&gt;osd_objectstore: bluestore&lt;/span&gt;
&lt;span class="s"&gt;#lvm_volumes:&lt;/span&gt;
&lt;span class="s"&gt;#  - data: /dev/sda&lt;/span&gt;
&lt;span class="s"&gt;#  - data: /dev/sdb&lt;/span&gt;
&lt;span class="s"&gt;osd_scenario: collocated&lt;/span&gt;
&lt;span class="s"&gt;dmcrypt: true&lt;/span&gt;
&lt;span class="s"&gt;devices:&lt;/span&gt;
&lt;span class="s"&gt;  - /dev/sdb&lt;/span&gt;

&lt;span class="s"&gt;openstack_config: true&lt;/span&gt;
&lt;span class="s"&gt;kube_pool:&lt;/span&gt;
&lt;span class="s"&gt;  name: &amp;quot;kube&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  pg_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  pgp_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  rule_name: &amp;quot;replicated_rule&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  type: 1&lt;/span&gt;
&lt;span class="s"&gt;  erasure_profile: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  expected_num_objects: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  application: &amp;quot;rbd&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;openstack_glance_pool:&lt;/span&gt;
&lt;span class="s"&gt;  name: &amp;quot;images&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  pg_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  pgp_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  rule_name: &amp;quot;replicated_rule&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  type: 1&lt;/span&gt;
&lt;span class="s"&gt;  erasure_profile: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  expected_num_objects: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;openstack_cinder_pool:&lt;/span&gt;
&lt;span class="s"&gt;  name: &amp;quot;volumes&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  pg_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  pgp_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  rule_name: &amp;quot;replicated_rule&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  type: 1&lt;/span&gt;
&lt;span class="s"&gt;  erasure_profile: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  expected_num_objects: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;openstack_cinder_backup_pool:&lt;/span&gt;
&lt;span class="s"&gt;  name: &amp;quot;backups&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  pg_num: 2&lt;/span&gt;
&lt;span class="s"&gt;  pgp_num: 2&lt;/span&gt;
&lt;span class="s"&gt;  rule_name: &amp;quot;replicated_rule&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  type: 1&lt;/span&gt;
&lt;span class="s"&gt;  erasure_profile: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  expected_num_objects: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;openstack_nova_vms_pool:&lt;/span&gt;
&lt;span class="s"&gt;  name: &amp;quot;vms&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  pg_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  pgp_num: 64&lt;/span&gt;
&lt;span class="s"&gt;  rule_name: &amp;quot;replicated_rule&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  type: 1&lt;/span&gt;
&lt;span class="s"&gt;  erasure_profile: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  expected_num_objects: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  application: &amp;quot;rbd&amp;quot;&lt;/span&gt;

&lt;span class="s"&gt;openstack_pools:&lt;/span&gt;
&lt;span class="s"&gt;  - &amp;quot;{{ kube_pool }}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  - &amp;quot;{{ openstack_glance_pool }}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  - &amp;quot;{{ openstack_cinder_pool }}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  - &amp;quot;{{ openstack_cinder_backup_pool }}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  - &amp;quot;{{ openstack_nova_vms_pool }}&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ping 체크 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible -b -i inventory.ini -m ping all
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ansible playbook site 스크립트를 실행하여 설치 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; cp site.yml.sample site.yml

&lt;span class="nv"&gt;INVENTORY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-i inventory.ini&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;EXTRA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-e @extra.yaml&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;OPTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-b -vvvv&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;site.yml&amp;quot;&lt;/span&gt;
ansible-playbook &lt;span class="nv"&gt;$INVENTORY&lt;/span&gt; &lt;span class="nv"&gt;$EXTRA&lt;/span&gt; &lt;span class="nv"&gt;$PLAY&lt;/span&gt; &lt;span class="nv"&gt;$OPTION&lt;/span&gt; 
&lt;span class="c1"&gt;# ansible-playbook -b -vvvv -i inventory.ini -e @extra.yaml site.yaml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;ceph ansible remove&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF | tee purge=cluster.sh &lt;/span&gt;
&lt;span class="s"&gt;#!/bin/bash &lt;/span&gt;
&lt;span class="s"&gt;set -ex &lt;/span&gt;
&lt;span class="s"&gt;INVENTORY=&amp;quot;-i inventory.ini&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;EXTRA=&amp;quot;-e @extra.yaml&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;PLAY=&amp;quot;infrastructure-playbooks/purge-cluster.yml&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;OPTION=&amp;quot;-b -vvv&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;ansible-playbook $INVENTORY $EXTRA $PLAY $OPTION &lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
chmod +x &lt;span class="nv"&gt;purge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cluster.sh  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;purge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cluster.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;주로 발생한 Error&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;/etc/ceph.conf 의 mon host 값 문제 &lt;ul&gt;
&lt;li&gt;ceph-ansible 4.0 버전의 Source 는 task 파일의 Jinja template 를 확인해보면 &lt;/li&gt;
&lt;li&gt;mon 호스트를 루프 돌면서 호스트 정보를 찍어주는데 &lt;/li&gt;
&lt;li&gt;mon v2, v1 버전을 마이그래이션 하는 소스가 들어가있다.&lt;/li&gt;
&lt;li&gt;그렇기때문에 git 다운받고 checkout stable-3.2 버전으로 실행시키며&lt;/li&gt;
&lt;li&gt;extra.yaml 에 monitor_address 값을 넣어준다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;에러내용 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fatal: &lt;span class="o"&gt;[&lt;/span&gt;mon1&lt;span class="o"&gt;]&lt;/span&gt;: FAILED! &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; 
  msg: &lt;span class="p"&gt;|&lt;/span&gt;-
    The conditional check &lt;span class="s1"&gt;&amp;#39;(ceph_health_raw.stdout != &amp;quot;&amp;quot;) and (ceph_health_raw.stdout | default(&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;) | from_json)[&amp;#39;&lt;/span&gt;state&lt;span class="s1"&gt;&amp;#39;] in [&amp;#39;&lt;/span&gt;leader&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;peon&lt;span class="s1"&gt;&amp;#39;]&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&lt;/span&gt; failed. The error was: No JSON object could be decoded
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;조치사항 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#조치 1 branch checkout &lt;/span&gt;
$ git checkout stable-3.2

$ vi extre.yaml
---
&lt;span class="c1"&gt;# extra.yaml &lt;/span&gt;
monitor_interface: eth1
&lt;span class="c1"&gt;#monitor_address: 10.0.3.2 ## 조치 2 여기부분&lt;/span&gt;
public_network: &lt;span class="m"&gt;10&lt;/span&gt;.0.3.0/24
cluster_network: &lt;span class="m"&gt;10&lt;/span&gt;.0.3.0/24
---

* 참고  : https://github.com/ceph/ceph-ansible/issues/3948
* 참고2 : http://lists.ceph.com/pipermail/ceph-users-ceph.com/2019-February/032801.html
&lt;/pre&gt;&lt;/div&gt;</content><category term="ceph"></category><category term="storage"></category></entry><entry><title>golang-localsetting</title><link href="https://seaofnight.github.io/golang-localsetting.html" rel="alternate"></link><published>2019-09-26T21:20:00+09:00</published><updated>2019-09-26T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-26:/golang-localsetting.html</id><summary type="html">&lt;p&gt;golang,local&lt;/p&gt;</summary><content type="html">&lt;h1&gt;go-lang download&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz
tar xvf go1.13* 
mv go /usr/local
&lt;/pre&gt;&lt;/div&gt;</content><category term="golang"></category><category term="local"></category></entry><entry><title>how-to-use-vagrant</title><link href="https://seaofnight.github.io/how-to-use-vagrant.html" rel="alternate"></link><published>2019-09-24T21:20:00+09:00</published><updated>2019-09-24T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-24:/how-to-use-vagrant.html</id><summary type="html">&lt;p&gt;vagrant,virtualbox&lt;/p&gt;</summary><content type="html">&lt;h1&gt;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;로컬 PC vagrant 를 설치&lt;/li&gt;
&lt;li&gt;vagrant 를 통한 버추얼 박스에 리소스 부여 방법 등을 설명하겠다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Vagrant 설치&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;본인 PC 은 Manjaro Linux 라서 크게 어려움이 있지는 않았다. &lt;ul&gt;
&lt;li&gt;윈도우키 "software" 입력 후 pacman 화면에서 vagrant 를 입력하여 설치 버튼을 클릭하면 끝난다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pacman -Sy virtualbox virtualbox-host-modules net-tools
$ sudo vagrant -v 
Vagrant &lt;span class="m"&gt;2&lt;/span&gt;.2.5
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;vagrant 리소스 할당 방법&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vagrant 는 공식홈페이지의 메뉴얼에 나온 내용대로 &lt;em&gt;vagrant init&lt;/em&gt; 하면 &lt;em&gt;VagrantFile&lt;/em&gt; 이 생성이된다.&lt;/li&gt;
&lt;li&gt;이 파일에 VM 의 스펙과 리소스 할당 등을 적어서 vagrant up 하면된다. &lt;/li&gt;
&lt;li&gt;Vagrant 는 Ruby 로 작성이 되어있어서 당연히 Ruby 와 친숙해지면 더 잘 운영할 수 있을것이다.&lt;/li&gt;
&lt;li&gt;우선 가지고 있는 소스의 내용을 적고 부분부분 설명을 하겠다. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@di7-03 vagrant&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# cat Vagrantfile &lt;/span&gt;
&lt;span class="c1"&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class="c1"&gt;# vi: set ft=ruby :&lt;/span&gt;

require &lt;span class="s1"&gt;&amp;#39;ipaddr&amp;#39;&lt;/span&gt;
load &lt;span class="s1"&gt;&amp;#39;./config.rb&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;centos/7&amp;quot;&lt;/span&gt;

def nodeIP&lt;span class="o"&gt;(&lt;/span&gt;ips, id&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;IPAddr.new ips&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;+id&lt;span class="o"&gt;))&lt;/span&gt;.to_s&lt;span class="o"&gt;()&lt;/span&gt;
end

Vagrant.configure&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;config&lt;span class="p"&gt;|&lt;/span&gt;
    config.ssh.insert_key &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
    config.vm.synced_folder &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/vagrant&amp;quot;&lt;/span&gt;, owner: &lt;span class="s2"&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;, group: &lt;span class="s2"&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt;, rsync__auto: true, type: &lt;span class="s2"&gt;&amp;quot;virtualbox&amp;quot;&lt;/span&gt;

    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;..&lt;span class="nv"&gt;$worker_count&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.each &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;index&lt;span class="p"&gt;|&lt;/span&gt;
        &lt;span class="nv"&gt;node_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vitess%d&amp;quot;&lt;/span&gt; % index

        config.vm.define node_name &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;node&lt;span class="p"&gt;|&lt;/span&gt;
            node.vm.box &lt;span class="o"&gt;=&lt;/span&gt; image
            node.vm.hostname &lt;span class="o"&gt;=&lt;/span&gt; node_name

            &lt;span class="c1"&gt;# multiple eth interface &lt;/span&gt;
            node.vm.network :private_network, ip: nodeIP&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cluster_ips&lt;/span&gt;, index&lt;span class="o"&gt;)&lt;/span&gt;
            node.vm.network :private_network, ip: nodeIP&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$manage_ips&lt;/span&gt;, index&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#           node.vm.network :private_network, ip: nodeIP($private_ips, index)&lt;/span&gt;

            node.vm.provider :virtualbox &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;vb&lt;span class="p"&gt;|&lt;/span&gt;
                vb.name &lt;span class="o"&gt;=&lt;/span&gt; node_name
                vb.cpus &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; 
                vb.memory &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8192&lt;/span&gt; 
                vb.customize &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;, :id, &lt;span class="s2"&gt;&amp;quot;--natdnshostresolver1&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

                &lt;span class="c1"&gt;# disk save path on barematal &lt;/span&gt;
                &lt;span class="nv"&gt;disk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/data/storage/&amp;quot;&lt;/span&gt;
                disk &lt;span class="s"&gt;&amp;lt;&amp;lt; node_name &lt;/span&gt;
&lt;span class="s"&gt;                disk &amp;lt;&amp;lt; &amp;quot;/sdb.vdi&amp;quot;&lt;/span&gt;

&lt;span class="s"&gt;                unless File.exist?(disk)&lt;/span&gt;
&lt;span class="s"&gt;                        vb.customize [&amp;#39;createhd&amp;#39;, &amp;#39;--filename&amp;#39;, disk, &amp;#39;--variant&amp;#39;, &amp;#39;Fixed&amp;#39;, &amp;#39;--size&amp;#39;, $disk_size_mb * 1024]&lt;/span&gt;
&lt;span class="s"&gt;                end&lt;/span&gt;
&lt;span class="s"&gt;                vb.customize [&amp;#39;storageattach&amp;#39;, :id,  &amp;#39;--storagectl&amp;#39;, &amp;#39;IDE&amp;#39;, &amp;#39;--port&amp;#39;, 1, &amp;#39;--device&amp;#39;, 0, &amp;#39;--type&amp;#39;, &amp;#39;hdd&amp;#39;, &amp;#39;--medium&amp;#39;, disk]&lt;/span&gt;
&lt;span class="s"&gt;            end&lt;/span&gt;

&lt;span class="s"&gt;            # provision script &lt;/span&gt;
&lt;span class="s"&gt;            node.vm.provision &amp;quot;shell&amp;quot;, &lt;/span&gt;
&lt;span class="s"&gt;                name: &amp;quot;Base Installation (scripts/base.sh)&amp;quot;,&lt;/span&gt;
&lt;span class="s"&gt;                path: &amp;quot;scripts/base.sh&amp;quot;&lt;/span&gt;

&lt;span class="s"&gt;        end&lt;/span&gt;
&lt;span class="s"&gt;    end&lt;/span&gt;
&lt;span class="s"&gt;end&lt;/span&gt;
&lt;span class="s"&gt;```sh&lt;/span&gt;


&lt;span class="s"&gt;* CPU, Memory 설정 &lt;/span&gt;
&lt;span class="s"&gt;```sh &lt;/span&gt;

&lt;span class="s"&gt;    node.vm.provider :virtualbox do |vb|&lt;/span&gt;
&lt;span class="s"&gt;        vb.name = node_name&lt;/span&gt;
        &lt;span class="c1"&gt;# CPU 8 Core&lt;/span&gt;
        vb.cpus &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; 
        &lt;span class="c1"&gt;# Memory 8192 mb&lt;/span&gt;
        vb.memory &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;8192&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Disk 설정 &lt;ul&gt;
&lt;li&gt;Disk 설정의 경우 Virtualbox 의 VM 저장공간과 동일하게 저장하면 되겠다. &lt;/li&gt;
&lt;li&gt;본인의 비루한 루비 언어실력으로 String contain 수준이 저렇지만 아래와 같이 사용하면 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# disk save path on barematal &lt;/span&gt;
    &lt;span class="nv"&gt;disk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/data/storage/&amp;quot;&lt;/span&gt;
    disk &lt;span class="s"&gt;&amp;lt;&amp;lt; node_n&lt;/span&gt;ame 
    disk &amp;lt;&amp;lt; &lt;span class="s2"&gt;&amp;quot;/sdb.vdi&amp;quot;&lt;/span&gt;

    unless File.exist?&lt;span class="o"&gt;(&lt;/span&gt;disk&lt;span class="o"&gt;)&lt;/span&gt;
            vb.customize &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;createhd&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--filename&amp;#39;&lt;/span&gt;, disk, &lt;span class="s1"&gt;&amp;#39;--variant&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Fixed&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--size&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;$disk_size_mb&lt;/span&gt; * &lt;span class="m"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    end
    vb.customize &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;storageattach&amp;#39;&lt;/span&gt;, :id,  &lt;span class="s1"&gt;&amp;#39;--storagectl&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;IDE&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--device&amp;#39;&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--type&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;hdd&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--medium&amp;#39;&lt;/span&gt;, disk&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Network 할당 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Ruby 의 IPAddr 함수 사용  &lt;/span&gt;
def nodeIP&lt;span class="o"&gt;(&lt;/span&gt;ips, id&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;IPAddr.new ips&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;+id&lt;span class="o"&gt;))&lt;/span&gt;.to_s&lt;span class="o"&gt;()&lt;/span&gt;
end

&lt;span class="c1"&gt;# Network 할당 &lt;/span&gt;
node.vm.network :private_network, ip: nodeIP&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$cluster_ips&lt;/span&gt;, index&lt;span class="o"&gt;)&lt;/span&gt;
node.vm.network :private_network, ip: nodeIP&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$manage_ips&lt;/span&gt;, index&lt;span class="o"&gt;)&lt;/span&gt;
node.vm.network :private_network, ip: nodeIP&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$private_ips&lt;/span&gt;, index&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Provision Shell 실행 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# provision script &lt;/span&gt;
    node.vm.provision &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;, 
        name: &lt;span class="s2"&gt;&amp;quot;Base Installation (scripts/base.sh)&amp;quot;&lt;/span&gt;,
        path: &lt;span class="s2"&gt;&amp;quot;scripts/base.sh&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="vagrant"></category><category term="virtualbox"></category></entry><entry><title>kubernetes-user-group-review</title><link href="https://seaofnight.github.io/kubernetes-user-group-review.html" rel="alternate"></link><published>2019-09-24T21:20:00+09:00</published><updated>2019-09-24T21:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-24:/kubernetes-user-group-review.html</id><summary type="html">&lt;p&gt;kubernetes, user&lt;/p&gt;</summary><content type="html">&lt;h1&gt;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;신청한지 1달조금 넘게 된 쿠버네티스 코리아 유저그룹 밋업을 금일 방문하였다. &lt;/li&gt;
&lt;li&gt;Kubernetes in Docker, KIND 를 독고혁님이 핸즈온으로 소개 및 교육이있었으며 &lt;/li&gt;
&lt;li&gt;Kubernetes SIG 모임의 ClusterAPI 의 설명이 있었다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;KIND Handon&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;KIND 공식 : https://kind.sigs.k8s.io/docs/user/quick-start/&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;독고혁님의 자료 : https://github.com/protess/k8scc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubectl 설치 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;### download kubectl 1.16.0&lt;/span&gt;
curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/darwin/amd64/kubectl
chmod -x ./kubectl
mv ./kubectl /usr/local/bin/kubectl
&lt;span class="c1"&gt;### if kubectl isn&amp;#39;t executable&lt;/span&gt;
chmod &lt;span class="m"&gt;755&lt;/span&gt; /usr/local/bin/kubectl
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;KIND 사전 준비사항 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Golang 설치 &lt;/span&gt;
curl -LO https://dl.google.com/go/go1.13.linux-amd64.tar.gz &lt;span class="p"&gt;|&lt;/span&gt; 
sudo tar -C /usr/local -xzf go1.*

&lt;span class="c1"&gt;# 환경변수 설정&lt;/span&gt;
&lt;span class="nv"&gt;GO111MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; go get sigs.k8s.io/kind@v0.5.1
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;go env GOPATH&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/bin&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Alias &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kubectl&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;chrome&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Applications/Google\\ \\Chrome.app/Contents/MacOS/Google\\ \\Chrome&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기타 유용한 CLI 툴 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubens &lt;/li&gt;
&lt;li&gt;kube ps1&lt;/li&gt;
&lt;li&gt;k9S&lt;/li&gt;
&lt;li&gt;k8s stern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;KIND Create Cluster &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# kind  도 stdin 방식을 지원하는지는 모르겠지만 우선 내용을 기록하기 위하여 아래와 같이 작성을 해본다. &lt;/span&gt;
cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF | kind create cluster --name kind-m --config - &lt;/span&gt;
&lt;span class="s"&gt;---&lt;/span&gt;
&lt;span class="s"&gt;kind: Cluster&lt;/span&gt;
&lt;span class="s"&gt;apiVersion: kind.sigs.k8s.io/v1alpha3&lt;/span&gt;
&lt;span class="s"&gt;nodes:&lt;/span&gt;
&lt;span class="s"&gt;- role: control-plane&lt;/span&gt;
&lt;span class="s"&gt;- role: worker&lt;/span&gt;
&lt;span class="s"&gt;- role: worker&lt;/span&gt;
&lt;span class="s"&gt;---&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Kubernetes Pattern &lt;ul&gt;
&lt;li&gt;https://www.oreilly.com/library/view/kubernetes-patterns/9781492050278/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ClusterAPI&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;쿠버네티스 클러스터 노드의 부트스트래핑과 머신프로비저닝을 분리&lt;/li&gt;
&lt;li&gt;쿠버네티스의 배포및 Provider를 CRD 로 관리할수 있도록 하게 한다. &lt;/li&gt;
&lt;li&gt;우선 대충 나도 소화는 해야할것 같다 &lt;/li&gt;
&lt;li&gt;오늘 있는 일들을 메모 형식으로 기록해 놓고 추후에 자세하게 포스팅..&lt;/li&gt;
&lt;li&gt;https://cluster-api.sigs.k8s.io/user/quick-start.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Kubernetes SIG&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;쿠버네티스 유저 그룹이 화요일마다 슬렉에서 모인다고 한다. &lt;/li&gt;
&lt;li&gt;kubernetes.slack.com 에서 kr-dev, kr-user 에 화요일마다. 9시반에 진행된다고 하니 잘 참석하는게..&lt;/li&gt;
&lt;/ul&gt;</content><category term="kubernetes"></category><category term="user"></category></entry><entry><title>install-k8s-cluster-with-kubespray</title><link href="https://seaofnight.github.io/install-k8s-cluster-with-kubespray.html" rel="alternate"></link><published>2019-09-22T14:20:00+09:00</published><updated>2019-09-22T14:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-22:/install-k8s-cluster-with-kubespray.html</id><summary type="html">&lt;p&gt;kubernetes, kubespray&lt;/p&gt;</summary><content type="html">&lt;h1&gt;개요&lt;/h1&gt;
&lt;p&gt;오늘은 K8s Cluster 을 간략하게 생성 해보는 예제를 기록해 보려고 한다. 
Cluster 생성은 Kubespray 프로젝트를 이용하여 생성할 예정이다. &lt;/p&gt;
&lt;h1&gt;클러스터 정보&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;vm 생성 : vagrant &lt;/li&gt;
&lt;li&gt;호스트 정보 &lt;ul&gt;
&lt;li&gt;k8s-master : 10.0.3.2&lt;/li&gt;
&lt;li&gt;k8s-node1 : 10.0.3.3&lt;/li&gt;
&lt;li&gt;k8s-node2  : 10.0.3.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;single master, 2 node &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;사전 설치&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;사전설치 요소에는 아래와 같다. &lt;ul&gt;
&lt;li&gt;pip 설치 &lt;/li&gt;
&lt;li&gt;kubespray 프로젝트 클론 &lt;/li&gt;
&lt;li&gt;ansible 설치 : pip install 하면 설치됨  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;나머지 sshd, user account,  host 설정은 skip 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install -y git python-pip 
$ git clone https://github.com/kubernetes-sigs/kubespray
$ pip install  -r kubespray/requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ssh fingerprint 관련 설정을 해준다. &lt;/li&gt;
&lt;li&gt;아래는 쉘 파일 내용이니 붙여 넣기한후에 실행 해주면 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; append_hosts_info&lt;span class="o"&gt;(){&lt;/span&gt;
cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /etc/hosts&lt;/span&gt;
&lt;span class="s"&gt;# kubernetes nodes&lt;/span&gt;
&lt;span class="s"&gt;10.0.3.2 k8s-master1&lt;/span&gt;
&lt;span class="s"&gt;10.0.3.3 k8s-worker1&lt;/span&gt;
&lt;span class="s"&gt;10.0.3.4 k8s-worker2&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;


&lt;span class="c1"&gt;# master &lt;/span&gt;
firewall-cmd --permanent --add-service&lt;span class="o"&gt;=&lt;/span&gt;https
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;443&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6443&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2379&lt;/span&gt;-2380/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10250&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10251&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10252&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10255&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8472&lt;/span&gt;/udp
firewall-cmd --add-masquerade --permanent
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30000&lt;/span&gt;-32767/tcp

&lt;span class="c1"&gt;# worker &lt;/span&gt;
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10250&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10255&lt;/span&gt;/tcp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8472&lt;/span&gt;/udp
firewall-cmd --permanent --add-port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30000&lt;/span&gt;-32767/tcp
firewall-cmd --add-masquerade --permanent


&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;function&lt;/span&gt; generate_ssh_key&lt;span class="o"&gt;(){&lt;/span&gt;

 cat /dev/zero &lt;span class="p"&gt;|&lt;/span&gt; ssh-keygen -q -N &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; deploy_ssh_key_all_nodes&lt;span class="o"&gt;(){&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="k"&gt;$(&lt;/span&gt;cat /etc/hosts &lt;span class="p"&gt;|&lt;/span&gt; tail -n &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  ssh-keyscan -t rsa &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/known_hosts
  sshpass -p &lt;span class="s2"&gt;&amp;quot;vagrant&amp;quot;&lt;/span&gt; ssh-copy-id -i /root/.ssh/id_rsa.pub root@&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  ssh &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; hostname
 &lt;span class="k"&gt;done&lt;/span&gt;


&lt;span class="o"&gt;}&lt;/span&gt;


main&lt;span class="o"&gt;(){&lt;/span&gt;

 append_hosts_info
 generate_ssh_key
 deploy_ssh_key_all_nodes

&lt;span class="o"&gt;}&lt;/span&gt;

main
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;설치 하고자 할 cluster 설정&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;kubespray 를 이용하여 cluster를 정의 하려면 inventory 파일을 수정해 주어야 한다. &lt;/li&gt;
&lt;li&gt;kubespary 의 인벤토리 파일은 inventory 파일의 sample 폴더를 참고 하면 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cp -rfp kubespray/inventory/sample kubespray/inventory/mycluster
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;inventory 설정&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF &amp;gt; kubespray/inventory/mycluster/hosts.ini&lt;/span&gt;
&lt;span class="s"&gt;[all]&lt;/span&gt;
&lt;span class="s"&gt;k8s-master ansible_host=10.0.3.2 ip=10.0.3.2 etcd_member_name=etcd1&lt;/span&gt;
&lt;span class="s"&gt;k8s-node1 ansible_host=10.0.3.3 ip=10.0.3.3&lt;/span&gt;
&lt;span class="s"&gt;k8s-node2 ansible_host=10.0.3.4 ip=10.0.3.4&lt;/span&gt;

&lt;span class="s"&gt;[kube-master]&lt;/span&gt;
&lt;span class="s"&gt;k8s-master&lt;/span&gt;

&lt;span class="s"&gt;[kube-node]&lt;/span&gt;
&lt;span class="s"&gt;k8s-master&lt;/span&gt;
&lt;span class="s"&gt;k8s-node1&lt;/span&gt;
&lt;span class="s"&gt;k8s-node2&lt;/span&gt;

&lt;span class="s"&gt;[etcd]&lt;/span&gt;
&lt;span class="s"&gt;k8s-master&lt;/span&gt;

&lt;span class="s"&gt;[k8s-cluster:children]&lt;/span&gt;
&lt;span class="s"&gt;kube-node&lt;/span&gt;
&lt;span class="s"&gt;kube-master&lt;/span&gt;

&lt;span class="s"&gt;EOF&lt;/span&gt;

$ cat kubespray/inventory/mycluster/hosts.ini

&lt;span class="c1"&gt;# network 가 flannel -&amp;gt; calico 로 변경해주는 스크립트이다. &lt;/span&gt;
$ sed -i &lt;span class="s1"&gt;&amp;#39;s/kube_network_plugin: flannel/kube_network_plugin: calico/&amp;#39;&lt;/span&gt; kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml

&lt;span class="c1"&gt;# external lb 가 있을경우에는 해당 IP 를 요기 추가해주어야된다. &lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;supplementary_addresses_in_ssl_keys: [219.250.188.73]&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml

&lt;span class="c1"&gt;# multus 를 사용할 경우엔 실행 시켜주면 된다. &lt;/span&gt;
$ sed -i &lt;span class="s1"&gt;&amp;#39;s/kube_network_plugin_multus: false/kube_network_plugin_multus: true/&amp;#39;&lt;/span&gt; kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;설치&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;인벤토리 설정이 정상적으로 진행되었다면 설치를 진행한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook -b -i inventory/mycluster/host.ini cluster.yml 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;일부 기능만 설치 하고자 할경우&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ansible tag 조회 &lt;/span&gt;
ansible-playbook -b -i inventory/mycluster/hosts.ini cluster.yml --list-tags

&lt;span class="c1"&gt;# 설치하고자 하는 플러그인을 태그명에 넣어준다. &lt;/span&gt;
ansible-playbook -b -i inventory/mycluster/hosts.ini cluster.yml --tags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rbd-provisioner,helm,metrics_server&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="kubernetes"></category><category term="kubespray"></category></entry><entry><title>markdown-supporting-test</title><link href="https://seaofnight.github.io/markdown-supporting-test.html" rel="alternate"></link><published>2019-09-21T14:20:00+09:00</published><updated>2019-09-21T14:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-21:/markdown-supporting-test.html</id><summary type="html">&lt;p&gt;markdown,pelican&lt;/p&gt;</summary><content type="html">&lt;h1&gt;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;본 페이지는 블로그 테마를 받았는데 테마에서 마크다운을 얼마나 지원하는지 확인하기 위한 페이지 이다. &lt;/li&gt;
&lt;li&gt;아래부터 정상적으로 보이는것을 기준으로 문서 작성에 활용할 예정이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;되는걸로 보이는것&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;header 1~6&lt;/li&gt;
&lt;li&gt;emphasis : bold 만됨 언더스코어 스크래치 안됨 &lt;/li&gt;
&lt;li&gt;list : 숫자, 특문 됨 &lt;/li&gt;
&lt;li&gt;링크, 이미지 &lt;/li&gt;
&lt;li&gt;코딩문법강조 &lt;/li&gt;
&lt;li&gt;Table 안됨 &lt;/li&gt;
&lt;li&gt;인라인 html 안됨 &lt;/li&gt;
&lt;li&gt;line breaking 안됨&lt;/li&gt;
&lt;li&gt;youtube video 안됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Table of Contents&lt;/h5&gt;
&lt;p&gt;&lt;a href="#headers"&gt;Headers&lt;/a&gt;&lt;br&gt;
&lt;a href="#emphasis"&gt;Emphasis&lt;/a&gt;&lt;br&gt;
&lt;a href="#lists"&gt;Lists&lt;/a&gt;&lt;br&gt;
&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;br&gt;
&lt;a href="#images"&gt;Images&lt;/a&gt;&lt;br&gt;
&lt;a href="#code"&gt;Code and Syntax Highlighting&lt;/a&gt;&lt;br&gt;
&lt;a href="#tables"&gt;Tables&lt;/a&gt;&lt;br&gt;
&lt;a href="#blockquotes"&gt;Blockquotes&lt;/a&gt;&lt;br&gt;
&lt;a href="#html"&gt;Inline HTML&lt;/a&gt;&lt;br&gt;
&lt;a href="#hr"&gt;Horizontal Rule&lt;/a&gt;&lt;br&gt;
&lt;a href="#lines"&gt;Line Breaks&lt;/a&gt;&lt;br&gt;
&lt;a href="#videos"&gt;YouTube Videos&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a name="headers"/&gt;&lt;/p&gt;
&lt;h2&gt;Headers&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# H1
## H2
### H3
#### H4
##### H5
###### H6

Alternatively, for H1 and H2, an underline-ish style:

Alt-H1
======

Alt-H2
------
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;H1&lt;/h1&gt;
&lt;h2&gt;H2&lt;/h2&gt;
&lt;h3&gt;H3&lt;/h3&gt;
&lt;h4&gt;H4&lt;/h4&gt;
&lt;h5&gt;H5&lt;/h5&gt;
&lt;h6&gt;H6&lt;/h6&gt;
&lt;p&gt;Alternatively, for H1 and H2, an underline-ish style:&lt;/p&gt;
&lt;h1&gt;Alt-H1&lt;/h1&gt;
&lt;h2&gt;Alt-H2&lt;/h2&gt;
&lt;p&gt;&lt;a name="emphasis"/&gt;&lt;/p&gt;
&lt;h2&gt;Emphasis&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Emphasis, aka italics, with *asterisks* or _underscores_.

Strong emphasis, aka bold, with **asterisks** or __underscores__.

Combined emphasis with **asterisks and _underscores_**.

Strikethrough uses two tildes. ~~Scratch this.~~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Emphasis, aka italics, with &lt;em&gt;asterisks&lt;/em&gt; or &lt;em&gt;underscores&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Strong emphasis, aka bold, with &lt;strong&gt;asterisks&lt;/strong&gt; or &lt;strong&gt;underscores&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Combined emphasis with &lt;strong&gt;asterisks and &lt;em&gt;underscores&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Strikethrough uses two tildes. ~~Scratch this.~~&lt;/p&gt;
&lt;p&gt;&lt;a name="lists"/&gt;&lt;/p&gt;
&lt;h2&gt;Lists&lt;/h2&gt;
&lt;p&gt;(In this example, leading and trailing spaces are shown with with dots: ⋅)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. First ordered list item
2. Another item
⋅⋅* Unordered sub-list. 
1. Actual numbers don&amp;#39;t matter, just that it&amp;#39;s a number
⋅⋅1. Ordered sub-list
4. And another item.

⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&amp;#39;ll use three here to also align the raw Markdown).

⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)

* Unordered list can use asterisks
- Or minuses
+ Or pluses
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;First ordered list item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;Unordered sub-list. &lt;/li&gt;
&lt;li&gt;Actual numbers don't matter, just that it's a number&lt;/li&gt;
&lt;li&gt;Ordered sub-list&lt;/li&gt;
&lt;li&gt;And another item.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).&lt;/p&gt;
&lt;p&gt;To have a line break without a paragraph, you will need to use two trailing spaces.&lt;br&gt;
   Note that this line is separate, but within the same paragraph.&lt;br&gt;
   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unordered list can use asterisks&lt;/li&gt;
&lt;li&gt;Or minuses&lt;/li&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="links"/&gt;&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;There are two ways to create links.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[I&amp;#39;m an inline-style link](https://www.google.com)

[I&amp;#39;m an inline-style link with title](https://www.google.com &amp;quot;Google&amp;#39;s Homepage&amp;quot;)

[I&amp;#39;m a reference-style link][Arbitrary case-insensitive reference text]

[I&amp;#39;m a relative reference to a repository file](../blob/master/LICENSE)

[You can use numbers for reference-style link definitions][1]

Or leave it empty and use the [link text itself].

URLs and URLs in angle brackets will automatically get turned into links. 
http://www.example.com or &amp;lt;http://www.example.com&amp;gt; and sometimes 
example.com (but not on Github, for example).

Some text to show that the reference links can follow later.

[arbitrary case-insensitive reference text]: https://www.mozilla.org
[1]: http://slashdot.org
[link text itself]: http://www.reddit.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.google.com"&gt;I'm an inline-style link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.google.com" title="Google's Homepage"&gt;I'm an inline-style link with title&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.mozilla.org"&gt;I'm a reference-style link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../blob/master/LICENSE"&gt;I'm a relative reference to a repository file&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://slashdot.org"&gt;You can use numbers for reference-style link definitions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or leave it empty and use the &lt;a href="http://www.reddit.com"&gt;link text itself&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;URLs and URLs in angle brackets will automatically get turned into links. 
http://www.example.com or &lt;a href="http://www.example.com"&gt;http://www.example.com&lt;/a&gt; and sometimes 
example.com (but not on Github, for example).&lt;/p&gt;
&lt;p&gt;Some text to show that the reference links can follow later.&lt;/p&gt;
&lt;p&gt;&lt;a name="images"/&gt;&lt;/p&gt;
&lt;h2&gt;Images&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Here&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;logo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hover&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;Inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &amp;quot;Logo Title Text 1&amp;quot;)&lt;/span&gt;

&lt;span class="n"&gt;Reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &amp;quot;Logo Title Text 2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's our logo (hover to see the title text):&lt;/p&gt;
&lt;p&gt;Inline-style: 
&lt;img alt="alt text" src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 1"&gt;&lt;/p&gt;
&lt;p&gt;Reference-style: 
&lt;img alt="alt text" src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" title="Logo Title Text 2"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="code"/&gt;&lt;/p&gt;
&lt;h2&gt;Code and Syntax Highlighting&lt;/h2&gt;
&lt;p&gt;Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and &lt;em&gt;Markdown Here&lt;/em&gt; -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. &lt;em&gt;Markdown Here&lt;/em&gt; supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the &lt;a href="http://softwaremaniacs.org/media/soft/highlight/test.html"&gt;highlight.js demo page&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Inline `code` has `back-ticks around` it.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inline &lt;code&gt;code&lt;/code&gt; has &lt;code&gt;back-ticks around&lt;/code&gt; it.&lt;/p&gt;
&lt;p&gt;Blocks of code are either fenced by lines with three back-ticks &lt;code&gt;```&lt;/code&gt;, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.&lt;/p&gt;
&lt;pre lang="no-highlight"&gt;&lt;code&gt;

wzxhzdk:6



wzxhzdk:7



wzxhzdk:8

&lt;/code&gt;&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JavaScript syntax highlighting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python syntax highlighting&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;No language indicated, so no syntax highlighting in Markdown Here (varies on Github). 
But let&amp;#39;s throw in a &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;tag&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a name="tables"/&gt;&lt;/p&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables aren't part of the core Markdown spec, but they are part of GFM and &lt;em&gt;Markdown Here&lt;/em&gt; supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Colons&lt;/span&gt; &lt;span class="s s-Atom"&gt;can&lt;/span&gt; &lt;span class="s s-Atom"&gt;be&lt;/span&gt; &lt;span class="s s-Atom"&gt;used&lt;/span&gt; &lt;span class="s s-Atom"&gt;to&lt;/span&gt; &lt;span class="s s-Atom"&gt;align&lt;/span&gt; &lt;span class="s s-Atom"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Tables&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Are&lt;/span&gt;           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Cool&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;-------------&lt;/span&gt; &lt;span class="p"&gt;|:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;------------:&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;-----:&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;col&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;right&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;aligned&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1600&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;col&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;centered&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;zebra&lt;/span&gt; &lt;span class="s s-Atom"&gt;stripes&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;are&lt;/span&gt; &lt;span class="s s-Atom"&gt;neat&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;

&lt;span class="nv"&gt;There&lt;/span&gt; &lt;span class="s s-Atom"&gt;must&lt;/span&gt; &lt;span class="s s-Atom"&gt;be&lt;/span&gt; &lt;span class="s s-Atom"&gt;at&lt;/span&gt; &lt;span class="s s-Atom"&gt;least&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="s s-Atom"&gt;dashes&lt;/span&gt; &lt;span class="s s-Atom"&gt;separating&lt;/span&gt; &lt;span class="s s-Atom"&gt;each&lt;/span&gt; &lt;span class="s s-Atom"&gt;header&lt;/span&gt; &lt;span class="s s-Atom"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="s s-Atom"&gt;outer&lt;/span&gt; &lt;span class="nf"&gt;pipes&lt;/span&gt; &lt;span class="p"&gt;(|)&lt;/span&gt; &lt;span class="s s-Atom"&gt;are&lt;/span&gt; &lt;span class="s s-Atom"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;and&lt;/span&gt; &lt;span class="s s-Atom"&gt;you&lt;/span&gt; &lt;span class="s s-Atom"&gt;don&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s s-Atom"&gt;t&lt;/span&gt; &lt;span class="s s-Atom"&gt;need&lt;/span&gt; &lt;span class="s s-Atom"&gt;to&lt;/span&gt; &lt;span class="s s-Atom"&gt;make&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; 
&lt;span class="s s-Atom"&gt;raw&lt;/span&gt; &lt;span class="nv"&gt;Markdown&lt;/span&gt; &lt;span class="s s-Atom"&gt;line&lt;/span&gt; &lt;span class="s s-Atom"&gt;up&lt;/span&gt; &lt;span class="s s-Atom"&gt;prettily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;You&lt;/span&gt; &lt;span class="s s-Atom"&gt;can&lt;/span&gt; &lt;span class="s s-Atom"&gt;also&lt;/span&gt; &lt;span class="s s-Atom"&gt;use&lt;/span&gt; &lt;span class="s s-Atom"&gt;inline&lt;/span&gt; &lt;span class="nv"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nv"&gt;Markdown&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Less&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Pretty&lt;/span&gt;
&lt;span class="s s-Atom"&gt;---&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;---&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;---&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;Still&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="s s-Atom"&gt;renders&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;**nicely**&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Colons can be used to align columns.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th align="center"&gt;Are&lt;/th&gt;
&lt;th align="right"&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 3 is&lt;/td&gt;
&lt;td align="center"&gt;right-aligned&lt;/td&gt;
&lt;td align="right"&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2 is&lt;/td&gt;
&lt;td align="center"&gt;centered&lt;/td&gt;
&lt;td align="right"&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zebra stripes&lt;/td&gt;
&lt;td align="center"&gt;are neat&lt;/td&gt;
&lt;td align="right"&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Markdown&lt;/th&gt;
&lt;th&gt;Less&lt;/th&gt;
&lt;th&gt;Pretty&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Still&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;renders&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;nicely&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a name="blockquotes"/&gt;&lt;/p&gt;
&lt;h2&gt;Blockquotes&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Blockquotes are very handy in email to emulate reply text.
&amp;gt; This line is part of the same quote.

Quote break.

&amp;gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&amp;#39;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. 
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quote break.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can &lt;em&gt;put&lt;/em&gt; &lt;strong&gt;Markdown&lt;/strong&gt; into a blockquote. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a name="html"/&gt;&lt;/p&gt;
&lt;h2&gt;Inline HTML&lt;/h2&gt;
&lt;p&gt;You can also use raw HTML in your Markdown, and it'll mostly work pretty well. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Definition list&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Is something people use sometimes.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Markdown in HTML&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Does *not* work **very** well. Use HTML &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;tags&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;dl&gt;
  &lt;dt&gt;Definition list&lt;/dt&gt;
  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;

  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;
  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;a name="hr"/&gt;&lt;/p&gt;
&lt;h2&gt;Horizontal Rule&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Three or more...

---

Hyphens

***

Asterisks

___

Underscores
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Three or more...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hyphens&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Asterisks&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Underscores&lt;/p&gt;
&lt;p&gt;&lt;a name="lines"/&gt;&lt;/p&gt;
&lt;h2&gt;Line Breaks&lt;/h2&gt;
&lt;p&gt;My basic recommendation for learning how line breaks work is to experiment and discover -- hit &amp;lt;Enter&amp;gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. "Markdown Toggle" is your friend. &lt;/p&gt;
&lt;p&gt;Here are some things to try out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Here&amp;#39;s a line for us to start with.

This line is separated from the one above by two newlines, so it will be a *separate paragraph*.

This line is also a separate paragraph, but...
This line is only separated by a single newline, so it&amp;#39;s a separate line in the *same paragraph*.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's a line for us to start with.&lt;/p&gt;
&lt;p&gt;This line is separated from the one above by two newlines, so it will be a &lt;em&gt;separate paragraph&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This line is also begins a separate paragraph, but...&lt;br&gt;
This line is only separated by a single newline, so it's a separate line in the &lt;em&gt;same paragraph&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(Technical note: &lt;em&gt;Markdown Here&lt;/em&gt; uses GFM line breaks, so there's no need to use MD's two-space line breaks.)&lt;/p&gt;
&lt;p&gt;&lt;a name="videos"/&gt;&lt;/p&gt;
&lt;h2&gt;YouTube Videos&lt;/h2&gt;
&lt;p&gt;They can't be added directly but you can add an image with a link to the video like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=YOUTUBE_VIDEO_ID_HERE&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&amp;quot;&lt;/span&gt; 
&lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IMAGE ALT TEXT HERE&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;240&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;180&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, in pure Markdown, but losing the image sizing and border:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Referencing a bug by #bugID in your git commit links it to the slip. For example #1. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;License: &lt;a href="https://creativecommons.org/licenses/by/3.0/"&gt;CC-BY&lt;/a&gt;&lt;/p&gt;</content><category term="markdown"></category><category term="pelican"></category></entry><entry><title>window-desktop-config-with-choco</title><link href="https://seaofnight.github.io/window-desktop-config-with-choco.html" rel="alternate"></link><published>2019-09-15T18:20:00+09:00</published><updated>2019-09-15T18:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-15:/window-desktop-config-with-choco.html</id><summary type="html">&lt;p&gt;window,desktop&lt;/p&gt;</summary><content type="html">&lt;h1&gt;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PC 가 이상하거나 하면 window10 에서 제공해주는 포멧이 너무 강력하기 때문에 설정 했던 방법애 대하여 간략하게 기록해둔다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;choco install&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;window 에는 package manager 가 centos 의 yum, arch 의 pacman 과 동일하게 choco 라는 관리도구가 있다. &lt;/li&gt;
&lt;li&gt;설치를 진행해줘야한다. 윈도에서 제공하는것들이 아니다보니.. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ Set-ExecutionPolicy Bypass -Scope Process -Force&lt;span class="p"&gt;;&lt;/span&gt; iex &lt;span class="o"&gt;((&lt;/span&gt;New-Object System.Net.WebClient&lt;span class="o"&gt;)&lt;/span&gt;.DownloadString&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://chocolatey.org/install.ps1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;choco 를 통한 어플리케이션 설치&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 브라우저 설치 
choco install -y chrome firefox   
# 가상화 도구 설치 
choco install -y virtualbox vagrant 
# terminal, rdp 설치 
choco install -y putty filezilla ultravnc  
# picpick 스크린샷, vscode, minikube 는 개발용 툴 
choco install -y picpick.portable vscode minikube 
&lt;/pre&gt;&lt;/div&gt;</content><category term="window"></category><category term="desktop"></category></entry><entry><title>centos-desktop-setting</title><link href="https://seaofnight.github.io/centos-desktop-setting.html" rel="alternate"></link><published>2019-09-14T18:20:00+09:00</published><updated>2019-09-14T18:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-14:/centos-desktop-setting.html</id><summary type="html">&lt;p&gt;centos,desktop&lt;/p&gt;</summary><content type="html">&lt;h1&gt;how to gnome desktop install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gnome desktop install 
$ sudo yum update  
$ yum group list  
$ yum groupinstall &lt;span class="s2"&gt;&amp;quot;GNOME Desktop&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Graphical Administration Tools&amp;quot;&lt;/span&gt; 
$ ln -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target 
$ sudo reboot 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;tiger vnc install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install -y tigervnc-server 
$ vncserver 
&lt;span class="c1"&gt;# modify option -&amp;gt; geometry : resolution &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="centos"></category><category term="desktop"></category></entry><entry><title>git-command-example</title><link href="https://seaofnight.github.io/git-command-example.html" rel="alternate"></link><published>2019-09-14T18:20:00+09:00</published><updated>2019-09-14T18:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-14:/git-command-example.html</id><summary type="html">&lt;p&gt;git&lt;/p&gt;</summary><content type="html">&lt;h1&gt;common 명령어&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;git init &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반 폴더에서 깃 저장소로 만들어 준다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git config &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;깃 저장소의 설정을 변경한다. 예시로 유저명, 메일등을 설정 할 수 있다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config --global user.name &lt;span class="s2"&gt;&amp;quot;yjkim1@gmail.com&amp;quot;&lt;/span&gt; 
$ git config --global user.email &lt;span class="s2"&gt;&amp;quot;yjkim1@gamil.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;git help &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git status &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;upload, download 관련&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;git add&lt;ul&gt;
&lt;li&gt;git 에 업로드 하기 위하여는 add commit 의 순서를 거치는데 우리가 어떤 파일을 로컬 레포에 저장할 것이다 라는 명령어이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add . &lt;span class="c1"&gt;# current folder &lt;/span&gt;
$ git add readme.md &lt;span class="c1"&gt;# readme.md &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;git commit &lt;ul&gt;
&lt;li&gt;commit 시에는 message 를 날려주면 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s2"&gt;&amp;quot;add pelican source&amp;quot;&lt;/span&gt; 

&lt;span class="c1"&gt;# 그러면 아래와 같이 로그에 출력이 되며 깃헙에도 메시지가 올라가게 된다. &lt;/span&gt;
$ git log 
commit 4fb60f7260f17fee8cc5b6e4eaf779d8997a2a5a &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; gh-pages, origin/gh-pages&lt;span class="o"&gt;)&lt;/span&gt;
Author: yjkim &amp;lt;seaofnight@hanmail.net&amp;gt;
Date:   Sat Sep &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:58:04 &lt;span class="m"&gt;2019&lt;/span&gt; +0900

    add pelican &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;git branch &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git checkout &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git branch 간에 이동을하거나 삭제를 하고자 할떄 사용한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout branch_name 
&lt;span class="c1"&gt;# 변경하면 폴더도 해당 브렌치에 맞도록 변경이 된다. &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;git push &lt;ul&gt;
&lt;li&gt;local 레포에 있는 변경사항을 원격 레포로 업로드 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push origin master 
&lt;span class="c1"&gt;# 다른 레포지토리로 업로드 하고 싶으면 이렇게 하면 된다. &lt;/span&gt;
$ git push -u origin gh-pages

&lt;span class="c1"&gt;# 원격 레포의 브랜치 삭제 : git push --delete &amp;lt;remote-name&amp;gt; &amp;lt;branch-name&amp;gt;&lt;/span&gt;
$ git push --delete origin gh 
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;git pull &lt;ul&gt;
&lt;li&gt;git 원격 레포에 있는 내용을 가져오는 명령이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;local 에서 repo 만들어서 remote 로 올리기&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# init 로 프로젝트 생성 &lt;/span&gt;
git init 

&lt;span class="c1"&gt;# 설정정보 등록 &lt;/span&gt;
git config --global user.name &lt;span class="s2"&gt;&amp;quot;yjkim&amp;quot;&lt;/span&gt;
git config --global user.email seaofnight@hanmail.net

&lt;span class="c1"&gt;# remote 정보 등록, 해당 remote 가 public 사이트이면 프로젝트 생성해야함. e.g github&lt;/span&gt;
git remote add origin https://github.com/seaofnight/vitess-example.git

&lt;span class="c1"&gt;# 병합하기 위하여 pull&lt;/span&gt;
git pull origin master

&lt;span class="c1"&gt;# 업로드 &lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category></entry><entry><title>manjaro-local-setting</title><link href="https://seaofnight.github.io/manjaro-local-setting.html" rel="alternate"></link><published>2019-09-14T18:20:00+09:00</published><updated>2019-09-14T18:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-14:/manjaro-local-setting.html</id><summary type="html">&lt;p&gt;local&lt;/p&gt;</summary><content type="html">&lt;h1&gt;한글 설정&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 폰트 다운로드 &lt;/span&gt;
$ pacman -S terminus-font noto-fonts-cjk ttf-dejavu ibus-hangul 
$ fc-match -s monospace
$ cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF &amp;gt; | /etc/.xprofile  &lt;/span&gt;

&lt;span class="s"&gt;export GTK_IM_MODULE=ibus&lt;/span&gt;
&lt;span class="s"&gt;export XMODIFIERS=@im=ibus&lt;/span&gt;
&lt;span class="s"&gt;export QT_IM_MODULE=ibus&lt;/span&gt;
&lt;span class="s"&gt;export OOO_FORCE_DESKTOP=&amp;quot;gnome&amp;quot;&lt;/span&gt;

&lt;span class="s"&gt;ibus-daemon -drx&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;oh-my-zsh install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chsh -s &lt;span class="sb"&gt;`&lt;/span&gt;which zsh&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$SHELL&lt;/span&gt; 
curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh &lt;span class="p"&gt;|&lt;/span&gt; sh

&lt;span class="c1"&gt;# https://github.com/zsh-users/zsh-syntax-highlighting&lt;/span&gt;
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(q-)PWD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ZDOTDIR&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/.zshrc

git clone git://github.com/zsh-users/zsh-autosuggestions &lt;span class="nv"&gt;$ZSH_CUSTOM&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh


&lt;span class="c1"&gt;# local zsh config to root &lt;/span&gt;
ln -s ~/.oh-myz-sh /root
ln -s ~/.zshrc /root
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;theme change &lt;/li&gt;
&lt;li&gt;terminal 환경에서  안깨지는 font 적용 후 확인  &lt;/li&gt;
&lt;li&gt;zsh autosuggestion install &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;byobu install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://aur.archlinux.org/byobu.git
&lt;span class="nb"&gt;cd&lt;/span&gt; byobu
makepkg
pacman -U *.xz
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;kvm install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C lscpu &lt;span class="p"&gt;|&lt;/span&gt; grep Virtualization
Virtualization: VT-x
sudo pacman -S virt-manager qemu vde2 ebtables dnsmasq bridge-utils openbsd-netcat
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; libvirtd.service
sudo systemctl start libvirtd.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;virtualbox install&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S virtualbox virtualbox-ext-vnc virtualbox-guest-dkms virtualbox-host-dkms virtualbox-guest-utils virtualbox-guest-iso virtualbox-sdk 

yjkim@yjkim-pc  ~/문서  uname -r
&lt;span class="m"&gt;4&lt;/span&gt;.19.66-1-MANJARO
sudo pacman -S linux419-virtualbox-host-modules

sudo /sbin/vboxconfig
sudo /sbin/rcvboxdrv setup
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;vscode hangul encodding&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Ctrl + ,&lt;span class="o"&gt;]&lt;/span&gt;
* linux default terminal 에서 한글이 출력되는 font 로 변경 필요 
setting &amp;gt; editor.fontFamily : &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;DejaVu Sans Mono &lt;span class="k"&gt;for&lt;/span&gt; Powerline&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;shutdown freeze solving&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://forum.manjaro.org/t/how-to-troubleshoot-shutdown-delays/5767&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;install other package&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -Ss -no-confirm jq, tree
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;firefox extension&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;translate&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;linux application remove password prompt&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;docker &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -a -G docker &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;libvirtd, virt-manager &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -a -G libvirt &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;python pip install on manjaro&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2 --version
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.16
python3 --version
Python &lt;span class="m"&gt;3&lt;/span&gt;.7.4

sudo pacman -S python-pip --noconfirm
&lt;/pre&gt;&lt;/div&gt;</content><category term="local"></category></entry><entry><title>vscode-extension-recommandation</title><link href="https://seaofnight.github.io/vscode-extension-recommandation.html" rel="alternate"></link><published>2019-09-14T18:20:00+09:00</published><updated>2019-09-14T18:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-14:/vscode-extension-recommandation.html</id><summary type="html">&lt;p&gt;local&lt;/p&gt;</summary><content type="html">&lt;h1&gt;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;vscode 를 스프링boot 개발에 사용해보았으나 그렇게 유용하지는 않았다. &lt;/li&gt;
&lt;li&gt;kubernetes, docker, git, 기타 shell oper 에 사용하기 유용한 몇가지만 추천해놓고 &lt;/li&gt;
&lt;li&gt;나중에 유용한게 나오면 추가 하는식으로 정리하겠다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;extension&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;kubernetes &lt;ul&gt;
&lt;li&gt;cloud-code &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;editing &lt;ul&gt;
&lt;li&gt;markdown all in one &lt;/li&gt;
&lt;li&gt;markdown preview enhanced &lt;/li&gt;
&lt;li&gt;yaml&lt;/li&gt;
&lt;li&gt;partical diff&lt;/li&gt;
&lt;li&gt;vscode-pandoc &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker &lt;/li&gt;
&lt;li&gt;docker compose&lt;/li&gt;
&lt;li&gt;git graph &lt;/li&gt;
&lt;/ul&gt;</content><category term="local"></category><category term="vscode"></category></entry><entry><title>python pelican blog config</title><link href="https://seaofnight.github.io/pelican-blog-setting.html" rel="alternate"></link><published>2019-09-14T10:20:00+09:00</published><updated>2019-09-14T10:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-14:/pelican-blog-setting.html</id><summary type="html">&lt;p&gt;pelican&lt;/p&gt;</summary><content type="html">&lt;h1&gt;install pelican dependency&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# virtualenv  &lt;/span&gt;
$ sudo pip install virtualenv

&lt;span class="c1"&gt;# pelican plugin &lt;/span&gt;
$ pip install pelican ghp-import Markdown typogrify pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;activate pelican venv&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir blog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; blog
$ virtualenv -p python3 venv
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;start pelican blog with pelican-quick-start&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart

 &lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; î‚° yjkim@yjkim-pc î‚° ~/workspaces/blog î‚° pelican-quickstart
Welcome to pelican-quickstart v4.1.1.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.                                                          

Please answer the following questions so this script can generate the files               
needed by Pelican.                                                                                                     


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;                                                                   
&amp;gt; What will be the title of this web site? yjkim blog                                                                  
&amp;gt; Who will be the author of this web site? yjkim                                                                       
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;ko&lt;span class="o"&gt;]&lt;/span&gt; ko                             
&amp;gt; Do you want to specify a URL prefix? e.g., https://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n                
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y                                                                    
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;                                                                         
&amp;gt; What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; Asia/Seoul                                                                    
&amp;gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n                                                                
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n                                                                
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n                                                            
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n                                                                 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n                                              
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; Y            
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; Y                                                             
Done. Your new project is available at /home/yjkim/workspaces/blog    
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;install pelican themes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;pelican 은 다른 블로그 생성기와 마찬가지로 theme 를 여러 사람들이 제작해놓은 사이트 들이 있기에 참조하여서 만들어 주면 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone --recursive https://github.com/getpelican/pelican-themes
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;install pelican plugin&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;요기는 추가로 정리 예정 &lt;/li&gt;
&lt;li&gt;추천하는 plugin 이 있어보임 &lt;/li&gt;
&lt;li&gt;https://github.com/getpelican/pelican-plugins&lt;/li&gt;
&lt;li&gt;https://www.sysadminnotes.ca/worknotes/useful-pelican-plugins.html&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category><category term="publishing"></category></entry><entry><title>tmux-byobu-cheat-sheet</title><link href="https://seaofnight.github.io/tmux-byobu-cheat-sheet.html" rel="alternate"></link><published>2019-09-14T10:20:00+09:00</published><updated>2019-09-14T10:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-14:/tmux-byobu-cheat-sheet.html</id><summary type="html">&lt;p&gt;tmux-byobu,cheat-sheet&lt;/p&gt;</summary><content type="html">&lt;h1&gt;tmux&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;개요 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tmux 는 screen 멀티플렉서 프로그램으로 gnu환경에서 terminal 을 분리 활용 할 수 있는 프로그램이다. &lt;/li&gt;
&lt;li&gt;tmux 는 단축키를 이용하기위하 호출하는 명령어가 있는데 기본적으로 Ctrl + b 를 누르면 단축키가 입력 가능하다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shoutcut&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 스크롤 
Ctrl + b [
# 화면 종분할 
Ctrl + b &amp;quot;
# 화면 횡분할
Ctrl + b %

# 입력 커서의 화면이동 
Ctrl + b 화살키 (1번만 이동)

# 화면 다음화면으로 
Ctrl + b o 

# 화면 사이즈 조절 방법 

(ctrl + b, :) 
## 하단 입력창에 타이핑
resize-pane -L 10 
            -R 10 
            -D 10 
            -U 10 

# 화면 레이아웃 변경 
ctrl + b, spacebar 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;byobu&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;byobu 는 백엔드로 screen, tmux 등 스크린 멀티플렉서를 내장하여 실행하도록 되어있으며 &lt;/li&gt;
&lt;li&gt;단축키가 screen, tmux에 비하여 심플하다. &lt;/li&gt;
&lt;li&gt;그래서 우선 로컬PC에는 byobu 개발용 서버에는 screen or tmux 중에 하나를 깔고 실행하며 운영에는.. 깔지 않는다. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# new window &lt;/span&gt;
F2

&lt;span class="c1"&gt;# next window &lt;/span&gt;
F4

&lt;span class="c1"&gt;# preous window &lt;/span&gt;
F3 

&lt;span class="c1"&gt;# 화면 분할&lt;/span&gt;
Ctrl + F2 
Shift + F2 

&lt;span class="c1"&gt;# 여러 화면에 동일 Command 입력 &lt;/span&gt;
Shift + F9
&lt;/pre&gt;&lt;/div&gt;</content><category term="tmux"></category><category term="byobu"></category><category term="cheat-sheet"></category></entry><entry><title>virsh-cheat-sheet</title><link href="https://seaofnight.github.io/virsh-cheat-sheet.html" rel="alternate"></link><published>2019-09-14T10:20:00+09:00</published><updated>2019-09-14T10:20:00+09:00</updated><author><name>yjkim</name></author><id>tag:seaofnight.github.io,2019-09-14:/virsh-cheat-sheet.html</id><summary type="html">&lt;p&gt;virsh,cheat-sheet&lt;/p&gt;</summary><content type="html">&lt;h1&gt;list&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh list 
virsh list --all
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;start&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh start &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;machine view&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh dominfo &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;machine get domid&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh domid &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_nm&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;machine get domname&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh domname &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;machine down&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh shutdown &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;machine reboot&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh reboot &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;machine remove&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh destroy &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;machine remove&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh undefine &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;vm_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;machine autostart loop&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;virsh list --uuid&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; virsh autostart &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;machine create&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;provision
    &lt;span class="nv"&gt;VRAM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;
    &lt;span class="nv"&gt;VCPU&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="nv"&gt;OSTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux
    &lt;span class="nv"&gt;OSVARIANT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;virtio26
    &lt;span class="nv"&gt;DISK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path=/data/kvm_disk/container-linux/container-linux1.qcow2,format=qcow2,bus=virtio&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;NETWORK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;network:ovs-network,mac=52:54:00:fe:b3:c0&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/libvirt/container-linux/container-linux1/domain.xml

    virt-install 
        --connect qemu:///system &lt;span class="se"&gt;\&lt;/span&gt;
        --import &lt;span class="se"&gt;\&lt;/span&gt;
        --name &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --ram &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VRAM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\ &lt;/span&gt;
        --vcpus &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VCPU&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --os-type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OSTYPE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --os-variant&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OSVARIANT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --disk &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DISK&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --network &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NETWORK&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        --vnc --noautoconsole &lt;span class="se"&gt;\&lt;/span&gt;
        --print-xml &amp;gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

    sed -ie &lt;span class="s1"&gt;&amp;#39;s|type=&amp;quot;kvm&amp;quot;|type=&amp;quot;kvm&amp;quot; xmlns:qemu=&amp;quot;http://libvirt.org/schemas/domain/qemu/1.0&amp;quot;|&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    sed -i &lt;span class="s2"&gt;&amp;quot;/&amp;lt;\/devices&amp;gt;/a &amp;lt;qemu:commandline&amp;gt;\n  &amp;lt;qemu:arg value=&amp;#39;-fw_cfg&amp;#39;/&amp;gt;\n  &amp;lt;qemu:arg value=&amp;#39;name=opt/com.coreos/config,file=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ignition_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;/&amp;gt;\n&amp;lt;/qemu:commandline&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    virsh define &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OUTPUT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    virsh start &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NODE_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;view kvm network command&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virsh net-list 

virsh net-destroy &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;netid&lt;/span&gt;&lt;span class="p"&gt; | name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

virsh net-edit &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;network&lt;/span&gt;&lt;span class="p"&gt;-name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

virsh net-create &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;network&lt;/span&gt;&lt;span class="p"&gt;-spec-file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="virsh"></category><category term="cheat-sheet"></category></entry></feed>